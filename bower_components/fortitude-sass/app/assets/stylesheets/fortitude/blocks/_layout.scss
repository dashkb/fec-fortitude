//------------------------------------
//  #LAYOUT
//------------------------------------

//
// The fortitude layout system uses `box-sizing: border-box;` and
// `display: inline-block;` to create an extremely powerful, flexible
// alternative to the traditional grid system. Combine the layout items with
// the widths found in `trumps.widths`.
//





.layout {
  display: block;
  font-size: 0;
  list-style: none;
  margin: 0;
  margin-left: -$base-spacing-unit;
  padding: 0;
}

//
// 1. Cause columns to stack side-by-side.
// 2. Used in conjunction with `.layout` to
//    remove pseudo margin for inline-block elements.
// 3. Space columns apart.
// 4. Used for elements that use push/pull extensions
// 5. Align columns to the tops of each other.
// 6. Full-width unless told to behave otherwise.
//

.layout__item {
  display: inline-block; // [1]
  font-size: $base-font-size; // [2]
  padding-left: $base-spacing-unit; // [3]
  position: relative; // [4]
  vertical-align: top; // [5]
  width: 100%; // [6]
}





//
// Align layout items to the vertical centers or bottoms of each other.
//

.layout--middle {
  > .layout__item {
    vertical-align: middle;
  }
}

.layout--bottom {
  > .layout__item {
    vertical-align: bottom;
  }
}





//
// Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your markup
// will display in order 4, 3, 2, 1 on your page.
//

.layout--rev {
  direction: rtl;
  text-align: left;

  > .layout__item {
    direction: ltr;
    text-align: left;
  }
}





//
// Layout items without gutters.
//

.layout--flush {
  margin-left: 0;

  > .layout__item {
    padding-left: 0;
  }
}





//
// Different size variations.
//

.layout--small {
  margin-left: (-(halve($base-spacing-unit)));

  > .layout__item {
    padding-left: halve($base-spacing-unit);
  }
}

.layout--large {
  margin-left: (-(double($base-spacing-unit)));

  > .layout__item {
    padding-left: double($base-spacing-unit);
  }
}
